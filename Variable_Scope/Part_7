Q: What will the following code print, and why?

a = 7
array = [1, 2, 3]

array.each do |element|
  a = element
end

puts a

My A: 7 - because the method cannot see the value of 'a' 
      outside of itself. The each method will iterate
      over the elements and place each one in the variable 'a'
      inside the method, but with no 'puts' inside the method 
      'a' will not print anything.

LS A: 3 - We are now dealing with a method invocation that has a
      block. The scoping rules for a method invocation with a 
      block differ from the rules for method definitions. With 
      method definitions, local variable scope is restricted to 
      the method definition itself. In contrast, a method 
      invocation with a block has more open scoping rules; the 
      block can use and modify local variables that are defined 
      outside the block.

      In this case, a starts out as 7, then we set a to 1, 2 and 
      3 in sequence. By the time we get to the puts, a has a value 
      of 3.