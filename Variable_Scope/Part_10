Q: What will the following code print, and why?

a = 7
array = [1, 2, 3]

def my_value(ary)
  ary.each do |b|
    a += b
  end
end

my_value(array)
puts a

My A: Output is 7 - because this is another example of shadowing.
      Once the method comes across the 'a' variable internally internally
      stops looking elsewhere.

LS A: Error is output - 'a' at the top level is not visible inside
      the invocation of the 'each' method with a block because the 
      invocation of 'each' is inside my_value, and method definitions 
      are self-contained with respect to local variables. Since the 
      outer 'a' is not visible inside the my_value method definition, 
      it isn't visible inside the method invocation with a block.